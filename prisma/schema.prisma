// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  googleId  String?
  kakaoId   String?
  username  String
  avatar    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isAdmin   Boolean   @default(false)
  photos    Photo[]
  likes     Like[]
  comments  Comment[]
}

model Photo {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  url          String
  title        String?
  caption      String?
  format       String
  date         String?
  deviceModel  String?
  lensModel    String?
  resolution   String
  width        Int
  height       Int
  dimensions   String
  iso          String?
  focalLength  String?
  exposure     String?
  aperture     String?
  shutterSpeed String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @db.ObjectId
  likes        Like[]
  comments     Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  photoId   String   @db.ObjectId
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User?     @relation(fields: [userId], references: [id])
  photo     Photo     @relation(fields: [photoId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?   @db.ObjectId
  photoId   String    @db.ObjectId
  parentId  String?   @db.ObjectId
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("Replies")
}
